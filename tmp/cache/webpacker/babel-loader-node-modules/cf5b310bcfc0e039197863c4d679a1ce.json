{"ast":null,"code":"var _jsxFileName = \"/home/lex/Projects/Rails/todolist-react-rg/app/javascript/components/Dashboard/TodoLists/TodoList/TodoListCreateTask/index.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { GET_PROJECTS } from '../../../../../actions/actionTypes';\n\nvar TodoListCreateTask = /*#__PURE__*/function (_React$Component) {\n  _inherits(TodoListCreateTask, _React$Component);\n\n  var _super = _createSuper(TodoListCreateTask);\n\n  function TodoListCreateTask(props) {\n    var _this;\n\n    _classCallCheck(this, TodoListCreateTask);\n\n    _this = _super.call(this, props);\n\n    _this.taskName = function (e) {\n      _this.setState({\n        taskNew: e.target.value\n      });\n    };\n\n    _this.addTask = function () {\n      var self = _assertThisInitialized(_this);\n\n      var taskName = _this.state.taskNew;\n      console.log(taskName);\n      console.log(_this.props.projectId); //console.log(this.props.project.id);\n      //var tasknew = prompt(\"Please enter your new task\");\n\n      if (taskName != '') {\n        //console.log(typeof(tasknew));\n        axios.post('/api/tasks/', {\n          name: taskName,\n          project_id: _this.props.projectId\n        }).then(function (response) {\n          //this.props.dispatch({ type: ADD_PROJECT, project: response.data })\n          self.props.dispatch({\n            type: GET_PROJECTS,\n            projects: response.data\n          });\n          console.log(\"task resp: \" + response);\n        }, function (error) {\n          console.log(error);\n        });\n      }\n    };\n\n    _this.state = {\n      taskNew: ''\n    };\n    return _this;\n  }\n\n  _createClass(TodoListCreateTask, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        onChange: this.taskName,\n        className: \"form-control\",\n        placeholder: \"Enter here the task you want to add..\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group-append\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-success\",\n        type: \"button\",\n        onClick: this.addTask,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }\n      }, \"Add Task\")));\n    }\n  }]);\n\n  return TodoListCreateTask;\n}(React.Component); //export default TodoListCreateTask\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    projects: state.projects\n  };\n};\n\nexport default connect(mapStateToProps)(TodoListCreateTask);","map":{"version":3,"sources":["/home/lex/Projects/Rails/todolist-react-rg/app/javascript/components/Dashboard/TodoLists/TodoList/TodoListCreateTask/index.jsx"],"names":["React","axios","connect","GET_PROJECTS","TodoListCreateTask","props","taskName","e","setState","taskNew","target","value","addTask","self","state","console","log","projectId","post","name","project_id","then","response","dispatch","type","projects","data","error","Component","mapStateToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAASC,YAAT,QAA4B,oCAA5B;;IAGMC,kB;;;;;AAEF,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UAOnBC,QAPmB,GAOT,UAACC,CAAD,EAAO;AACb,YAAKC,QAAL,CAAc;AACVC,QAAAA,OAAO,EAAEF,CAAC,CAACG,MAAF,CAASC;AADR,OAAd;AAGH,KAXkB;;AAAA,UAanBC,OAbmB,GAaT,YAAM;AACZ,UAAIC,IAAI,gCAAR;;AACA,UAAIP,QAAQ,GAAG,MAAKQ,KAAL,CAAWL,OAA1B;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKX,KAAL,CAAWY,SAAvB,EAJY,CAKZ;AACN;;AACA,UAAIX,QAAQ,IAAG,EAAf,EAAmB;AAClB;AACAL,QAAAA,KAAK,CAACiB,IAAN,CAAW,aAAX,EAA0B;AACbC,UAAAA,IAAI,EAAEb,QADO;AAEbc,UAAAA,UAAU,EAAE,MAAKf,KAAL,CAAWY;AAFV,SAA1B,EAIEI,IAJF,CAIO,UAACC,QAAD,EAAc;AACJ;AACAT,UAAAA,IAAI,CAACR,KAAL,CAAWkB,QAAX,CAAoB;AAAEC,YAAAA,IAAI,EAAErB,YAAR;AAAsBsB,YAAAA,QAAQ,EAAEH,QAAQ,CAACI;AAAzC,WAApB;AACfX,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBM,QAA5B;AACA,SARF,EAQI,UAACK,KAAD,EAAW;AACbZ,UAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACA,SAVF;AAWA;AACD,KAlCqB;;AAEf,UAAKb,KAAL,GAAa;AACTL,MAAAA,OAAO,EAAE;AADA,KAAb;AAFe;AAKlB;;;;6BA+BQ;AACL,0BACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAE,KAAKH,QAAlC;AAA4C,QAAA,SAAS,EAAC,cAAtD;AAAqE,QAAA,WAAW,EAAC,uCAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAoC,QAAA,IAAI,EAAC,QAAzC;AAAkD,QAAA,OAAO,EAAE,KAAKM,OAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CAFJ,CADJ;AAQH;;;;EA/C4BZ,KAAK,CAAC4B,S,GAkDvC;;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACf,KAAD,EAAW;AAClC,SAAM;AACLW,IAAAA,QAAQ,EAAEX,KAAK,CAACW;AADX,GAAN;AAGA,CAJD;;AAMA,eAAevB,OAAO,CAAE2B,eAAF,CAAP,CAA0BzB,kBAA1B,CAAf","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport {connect} from 'react-redux'\nimport { GET_PROJECTS} from '../../../../../actions/actionTypes'\n\n\nclass TodoListCreateTask extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            taskNew: ''\n          };\n    }\n\n    taskName= (e) => {\n        this.setState({\n            taskNew: e.target.value\n        })\n    }\n    \n    addTask = () => {\n        let self = this;\n        var taskName = this.state.taskNew;\n        console.log(taskName);\n        console.log(this.props.projectId);\n        //console.log(this.props.project.id);\n\t\t//var tasknew = prompt(\"Please enter your new task\");\n\t\tif (taskName!= '') {\n\t\t\t//console.log(typeof(tasknew));\n\t\t\taxios.post('/api/tasks/', {\n                name: taskName,\n                project_id: this.props.projectId\n\t\t\t})\n\t\t\t\t.then((response) => {\n                    //this.props.dispatch({ type: ADD_PROJECT, project: response.data })\n                    self.props.dispatch({ type: GET_PROJECTS, projects: response.data })\n\t\t\t\t\tconsole.log(\"task resp: \" + response);\n\t\t\t\t}, (error) => {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t});\n\t\t}\n\t}\n\n    render() {\n        return (\n            <div className=\"input-group mb-3\">\n                <input type=\"text\" onChange={this.taskName} className=\"form-control\" placeholder=\"Enter here the task you want to add..\"/>\n                <div className=\"input-group-append\">\n                    <button className=\"btn btn-success\" type=\"button\" onClick={this.addTask}>Add Task</button>\n                </div>\n            </div>\n        )\n    }\n}\n\n//export default TodoListCreateTask\n\nconst mapStateToProps = (state) => {\n\treturn{\n\t\tprojects: state.projects\n\t}\n}\n\nexport default connect (mapStateToProps)(TodoListCreateTask)"]},"metadata":{},"sourceType":"module"}