{"ast":null,"code":"var _jsxFileName = \"/home/lex/Projects/Rails/todolist-react-rg/app/javascript/components/Dashboard/AddProject/index.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport React from 'react';\nimport axios from 'axios'; //import styles from './App.module.scss'\n//import Todolists from './TodoLists'\n\nimport { connect } from 'react-redux';\n\nvar AddProject = /*#__PURE__*/function (_React$Component) {\n  _inherits(AddProject, _React$Component);\n\n  var _super = _createSuper(AddProject);\n\n  //constructor(props) {\n  //\tsuper(props);\n  //}\n  function AddProject(props) {\n    var _this;\n\n    _classCallCheck(this, AddProject);\n\n    _this = _super.call(this, props); //this.state = {\n    //projectnew\n    //}\n\n    _this.createProject = function () {\n      console.log(_assertThisInitialized(_this));\n      var projectnew = prompt(\"Please enter your new project\");\n\n      if (projectnew != null) {\n        console.log(typeof projectnew);\n        axios.post('/api/projects', {\n          name: projectnew\n        }).then(function (response) {\n          //debugger\n          _this.props.dispatch({\n            type: ADD_PROJECT,\n            project: response.data\n          });\n\n          console.log(response);\n        }, function (error) {\n          console.log(error);\n        });\n      }\n    };\n\n    return _this;\n  }\n  /*\n  axios.post('/api/projects', {\n  \t\t\tname: projectnew\t\n  \t\t})\n  \t\t\t.then((response) => {\n  \t\t\t\tconsole.log(response);\n  \t\t\t}, (error) => {\n  \t\t\t\tconsole.log(error);\n  \t\t\t});\n  \taxios({\n  \t\t\tmethod: 'post',\n  \t\t\turl: '/api/projects/',\n  \t\t\tdata: {\n  \t\t\t\tname: projectnew,\n  \t\t\t},\n  \t\t}).catch(error => {\n  \t\t\tconsole.log(error);\n  \t\t}).then(response => {\n  \t\t\t// this is now called!\n  \t\t\tconsole.log(response);\n  \t\t});\t\t\n  */\n\n\n  _createClass(AddProject, [{\n    key: \"render\",\n\n    /*addProject = () => {\n    \tvar projectnew = prompt(\"Please enter your new project\");\n    \tif (projectnew != null) {\n    \t\taxios.post('/api/projects', { project: { name: projectnew } })\n    \t\t\t.then(response => {\n    \t\t\t\tthis.props.dispatch(addProject(response.data.name))\n    \t\t\t})\n    \t\t\t.catch(error => console.log(error))\n    \t}\n    }*/\n\n    /*addProject = () => {\n    \tlet self = this;\n    \tvar projectnew = prompt(\"Please enter your new project\");\n    \t//if (projectnew != null) {\n    \tconsole.log(projectnew);\n    \taxios.post('/api/projects/', {\n    \t\tname: projectnew\n    \t})\n    \t\t.then((response) => {\n    \t\t\tconsole.log(response);\n    \t\t}, (error) => {\n    \t\t\tconsole.log(error);\n    \t\t});\n    \t//}\n    }*/\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 4\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-succes mr-2\",\n        onClick: this.createProject,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }\n      }, \"Add todo\"));\n    }\n  }]);\n\n  return AddProject;\n}(React.Component);\n/*const mapStateToProps = (state) => {\n\treturn {\n\t\tprojects: state.projects\n\t}\n}*/\n\n\nexport default connect()(AddProject); //export default AddProject","map":{"version":3,"sources":["/home/lex/Projects/Rails/todolist-react-rg/app/javascript/components/Dashboard/AddProject/index.jsx"],"names":["React","axios","connect","AddProject","props","createProject","console","log","projectnew","prompt","post","name","then","response","dispatch","type","ADD_PROJECT","project","data","error","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,SAAQC,OAAR,QAAsB,aAAtB;;IAGMC,U;;;;;AAEL;AACA;AACA;AACA,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,8BAAMA,KAAN,EADkB,CAElB;AACA;AACA;;AAJkB,UA8BnBC,aA9BmB,GA8BH,YAAM;AACrBC,MAAAA,OAAO,CAACC,GAAR;AACA,UAAIC,UAAU,GAAGC,MAAM,CAAC,+BAAD,CAAvB;;AACA,UAAID,UAAU,IAAI,IAAlB,EAAwB;AACvBF,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAOC,UAAnB;AACAP,QAAAA,KAAK,CAACS,IAAN,CAAW,eAAX,EAA4B;AAC3BC,UAAAA,IAAI,EAAEH;AADqB,SAA5B,EAGEI,IAHF,CAGO,UAACC,QAAD,EAAc;AACnB;AACA,gBAAKT,KAAL,CAAWU,QAAX,CAAoB;AAAEC,YAAAA,IAAI,EAAEC,WAAR;AAAqBC,YAAAA,OAAO,EAAEJ,QAAQ,CAACK;AAAvC,WAApB;;AACAZ,UAAAA,OAAO,CAACC,GAAR,CAAYM,QAAZ;AACA,SAPF,EAOI,UAACM,KAAD,EAAW;AACbb,UAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACA,SATF;AAUA;AACD,KA9CkB;;AAAA;AAKlB;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAoBC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BACU;AACR,0BAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAK;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,qBAAhC;AAAsD,QAAA,OAAO,EAAE,KAAKd,aAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAL,CAFD;AAKA;;;;EArFuBL,KAAK,CAACoB,S;AAwF/B;AACA;AACA;AACA;AACA;;;AAEA,eAAelB,OAAO,GAAGC,UAAH,CAAtB,C,CACA","sourcesContent":["import React from 'react'\nimport axios from 'axios'\n//import styles from './App.module.scss'\n//import Todolists from './TodoLists'\nimport {connect} from 'react-redux'\n\n\nclass AddProject extends React.Component {\n\n\t//constructor(props) {\n\t//\tsuper(props);\n\t//}\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t//this.state = {\n\t\t//projectnew\n\t\t//}\n\t}\n\n\t/*\n\taxios.post('/api/projects', {\n\t\t\t\tname: projectnew\t\n\t\t\t})\n\t\t\t\t.then((response) => {\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t}, (error) => {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t});\n\n\taxios({\n\t\t\t\tmethod: 'post',\n\t\t\t\turl: '/api/projects/',\n\t\t\t\tdata: {\n\t\t\t\t\tname: projectnew,\n\t\t\t\t},\n\t\t\t}).catch(error => {\n\t\t\t\tconsole.log(error);\n\t\t\t}).then(response => {\n\t\t\t\t// this is now called!\n\t\t\t\tconsole.log(response);\n\t\t\t});\t\t\n\t*/\n\tcreateProject = () => {\n\t\tconsole.log(this);\n\t\tvar projectnew = prompt(\"Please enter your new project\");\n\t\tif (projectnew != null) {\n\t\t\tconsole.log(typeof(projectnew));\n\t\t\taxios.post('/api/projects', {\n\t\t\t\tname: projectnew\n\t\t\t})\n\t\t\t\t.then((response) => {\n\t\t\t\t\t//debugger\n\t\t\t\t\tthis.props.dispatch({ type: ADD_PROJECT, project: response.data })\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t}, (error) => {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t});\n\t\t}\n\t}\n\n\t/*addProject = () => {\n\t\tvar projectnew = prompt(\"Please enter your new project\");\n\t\tif (projectnew != null) {\n\t\t\taxios.post('/api/projects', { project: { name: projectnew } })\n\t\t\t\t.then(response => {\n\t\t\t\t\tthis.props.dispatch(addProject(response.data.name))\n\t\t\t\t})\n\t\t\t\t.catch(error => console.log(error))\n\t\t}\n\t}*/\n\n\t/*addProject = () => {\n\t\tlet self = this;\n\t\tvar projectnew = prompt(\"Please enter your new project\");\n\t\t//if (projectnew != null) {\n\t\tconsole.log(projectnew);\n\t\taxios.post('/api/projects/', {\n\t\t\tname: projectnew\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(response);\n\t\t\t}, (error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t\t//}\n\t}*/\n\trender() {\n\t\treturn (\n\n\t\t\t<div><button type=\"button\" className=\"btn btn-succes mr-2\" onClick={this.createProject}>Add todo</button></div>\n\n\t\t)\n\t}\n}\n\n/*const mapStateToProps = (state) => {\n\treturn {\n\t\tprojects: state.projects\n\t}\n}*/\n\nexport default connect()(AddProject)\n//export default AddProject"]},"metadata":{},"sourceType":"module"}